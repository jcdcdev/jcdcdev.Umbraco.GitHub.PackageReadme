name: "üîê Update JCDC.DEV Umbraco package readme"
description: ""
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  dry-run:
    description: "Dry run: Run the workflow without making any changes"
    required: false
    default: "false"
  project-name:
    description: "The name of the project to update the readme for"
    required: true
  readme-filepath:
    description: "The path to the file"
    required: false
    default: "./.github/README.md"
  nuget-readme-filepath:
    description: "The path to the file"
    required: false
    default: "./docs/README_nuget.md"
  api-key:
    description: "The API key to use"
    required: true
  branch:
    description: "The branch to push the changes to"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
    - name: Update readme
      id: update-readme
      shell: pwsh
      env:
        README_FILEPATH: ${{ inputs.readme-filepath }}
        PROJECT_NAME: ${{ inputs.project-name }}
        DRY_RUN: ${{ inputs.dry-run }}
        API_KEY: ${{ inputs.api-key }}
      run: |
        # get the current SECURITY.md file if it exists
        if (Test-Path $env:README_FILEPATH) {
          $currentFile = Get-Content -Path $env:README_FILEPATH -Raw
        } else {
          $currentFile = ""
        }

        $newContent = ""

        $baseUrl="https://cms.jcdc.dev/api/marketplace/packages/readme/$($env:PROJECT_NAME)?type=github&branch=${{ inputs.branch }}"
        try{
          # include api key header
          $response = Invoke-RestMethod -Uri $baseUrl -Method Get -Headers @{
            "Api-Key" = "$($env:API_KEY)"
          } -ErrorAction Stop
          if ($response -eq $null) {
            Write-Host "No readme found for $baseUrl"
            exit 0
          }

          $newContent = $response
        }
        catch {
          Write-Host "Failed to get readme from $baseUrl"
          if($_.ErrorDetails.Message) {
            Write-Host $_.ErrorDetails.Message
          } else {
              Write-Host $_
          }
          exit 0
        }

        # check if the new content is different from the current content
        if ($currentFile -eq $newContent) {
          Write-Host "No changes to the readme"
          exit 0
        }

        $newContent | Set-Content -Path $env:README_FILEPATH -Force
        Write-Host "Updated the readme file"
        Write-Host "New content: $newContent"
        if ($env:DRY_RUN -eq "true") {  
          Write-Host "This is a dry run. No changes will be made."
          return
        } 

        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        write-host "Committing changes to $env:README_FILEPATH"
        
        # commit the changes
        git add $env:README_FILEPATH
        git commit -m "doc: Update README"
        git push
    - name: Update nuget readme
      id: update-buget-readme
      shell: pwsh
      env:
        NUGET_README_FILEPATH: ${{ inputs.nuget-readme-filepath }}
        PROJECT_NAME: ${{ inputs.project-name }}
        DRY_RUN: ${{ inputs.dry-run }}
        API_KEY: ${{ inputs.api-key }}
      run: |
        if (Test-Path $env:NUGET_README_FILEPATH) {
          $currentFile = Get-Content -Path $env:NUGET_README_FILEPATH -Raw
        } else {
          $currentFile = ""
        }

        $newContent = ""

        $baseUrl="https://cms.jcdc.dev/api/marketplace/packages/readme/$($env:PROJECT_NAME)?type=nuget&branch=${{ inputs.branch }}"
        try{
          # include api key header
          $response = Invoke-RestMethod -Uri $baseUrl -Method Get -Headers @{
            "Api-Key" = "$($env:API_KEY)"
          } -ErrorAction Stop
          if ($response -eq $null) {
            Write-Host "No readme found for $baseUrl"
            exit 0
          }
          
          $newContent = $response
        }
        catch {
          Write-Host "Failed to get readme from $baseUrl"
          if($_.ErrorDetails.Message) {
            Write-Host $_.ErrorDetails.Message
          } else {
              Write-Host $_
          }
          exit 0
        }

        # check if the new content is different from the current content
        if ($currentFile -eq $newContent) {
          Write-Host "No changes to the readme"
          exit 0
        }

        $newContent | Set-Content -Path $env:NUGET_README_FILEPATH -Force
        Write-Host "Updated the readme file"
        Write-Host "New content: $newContent"
        if ($env:DRY_RUN -eq "true") {  
          Write-Host "This is a dry run. No changes will be made."
          return
        } 

        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        write-host "Committing changes to $env:NUGET_README_FILEPATH"
        
        # commit the changes
        git add $env:NUGET_README_FILEPATH
        git commit -m "doc: Update NuGet README"
        git push
